/***************************************************************************
                          player.bin  -  C64 Sid Player
                             -------------------
    begin                : 
    copyright            : (C) 2000 by Dag Lem
    email                : resid@nimrod.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
/***************************************************************************
 *  $Log: not supported by cvs2svn $
 *  Revision 1.5  2001/04/10 21:55:38  s_a_white
 *  VIC now enabled even if play address is 0.
 *
 *  Revision 1.4  2001/03/29 18:03:20  s_a_white
 *  Added assembly source code.
 *
 *  Revision 1.3  2001/03/26 21:45:53  s_a_white
 *  HVSC now correctly use the VIC.
 *
 *  Revision 1.2  2001/03/09 22:25:43  s_a_white
 *  User interrupt vector ignored if valid play address.  Bank register properly
 *  restored at end of play loop.  For play address of zero, bank register is left
 *  alone after initial init call.
 *
 *  Revision 1.1  2001/02/21 21:40:13  s_a_white
 *  Modified VSID C64 player.
 *
 ***************************************************************************/

0xE9, 0x00, 0x18, 0x00, 0xAC, 0x00, 0x91, 0x00,
0x00, 0x00, 0xE0, 0x00, 0xC7, 0x00, 0x18, 0x00,
0xE8, 0x00, 0x6C, 0x02, 0x00, 0x6C, 0x04, 0x00,
0x78, 0xA2, 0xFF, 0x9A, 0xD8, 0xA9, 0x7F, 0x8D,
0x0D, 0xDC, 0x8D, 0x0D, 0xDD, 0xAD, 0x0D, 0xDC,
0xAD, 0x0D, 0xDD, 0xA2, 0x00, 0x8E, 0x1A, 0xD0,
0xAE, 0x19, 0xD0, 0x8E, 0x19, 0xD0, 0xA9, 0x1B,
0x8D, 0x11, 0xD0, 0x8E, 0x12, 0xD0, 0xAD, 0xA6,
0x02, 0xF0, 0x06, 0xA9, 0x25, 0xA2, 0x40, 0xD0,
0x04, 0xA9, 0x95, 0xA2, 0x42, 0x8D, 0x04, 0xDC,
0x8E, 0x05, 0xDC, 0xA9, 0x0F, 0x8D, 0x18, 0xD4,
0xA5, 0x07, 0xD0, 0x07, 0xA9, 0x81, 0x8D, 0x1A,
0xD0, 0xD0, 0x0A, 0xA9, 0x81, 0xA2, 0x01, 0x8D,
0x0D, 0xDC, 0x8E, 0x0E, 0xDC, 0xA9, 0x2F, 0x85,
0x00, 0xA5, 0x03, 0x20, 0x94, 0x00, 0x85, 0x01,
0xA5, 0x05, 0x20, 0x94, 0x00, 0x85, 0x08, 0xA6,
0x06, 0xCA, 0x8A, 0xA2, 0x00, 0x20, 0x12, 0x00,
0xA5, 0x05, 0xF0, 0x04, 0xA9, 0x37, 0x85, 0x01,
0x58, 0x4C, 0x91, 0x00, 0xC9, 0xE0, 0x90, 0x03,
0xA9, 0x35, 0x60, 0xC9, 0xD0, 0x90, 0x03, 0xA9,
0x34, 0x60, 0xC9, 0xA0, 0x90, 0x03, 0xA9, 0x36,
0x60, 0xA9, 0x37, 0x60, 0x48, 0x8A, 0x48, 0x98,
0x48, 0xBA, 0xE0, 0xFC, 0xB0, 0x0A, 0xBD, 0x04,
0x01, 0x29, 0x10, 0xF0, 0x03, 0x6C, 0x16, 0x03,
0xA5, 0x05, 0xD0, 0x07, 0x6C, 0x14, 0x03, 0xA5,
0x05, 0xF0, 0x0F, 0xA5, 0x01, 0xA6, 0x08, 0x85,
0x09, 0x86, 0x01, 0x20, 0x15, 0x00, 0xA5, 0x09,
0x85, 0x01, 0xAD, 0x19, 0xD0, 0x8D, 0x19, 0xD0,
0xAD, 0x0D, 0xDC, 0x68, 0xA8, 0x68, 0xAA, 0x68,
0x40, 0x6C, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00

/***************************************************************************

#define irqusr  $0314
#define brkusr  (irqusr + 2)
#define nmiusr  (brkusr + 2)

            *=0
            ; 6510 vectors
nmivec      .word nmi

            ; parameters (block 1)
initvec     .word
playvec     .word
playnum     .byte
speed       .byte

            *=2
coldvec     .word cold
irqvec      .word irq
idlevec     .word idle

            ; parameters (block 2)
iomap       .byte
oldbank     .byte

retusr      .word irqret

            ; initial user interrupt vectors
            .word irqjob
            .word brkjob
            .word nmijob

            ; init/play PSID
init        jmp (initvec)
play        jmp (playvec)


            ; cold start
brkjob
cold        sei
            ldx #$ff
            txs
            cld
            ; turn interrupts off
            lda #$7f
            sta $dc0d
            sta $dd0d
            lda $dc0d
            lda $dd0d
            ldx #$00
            stx $d01a
            ldx $d019
            stx $d019

            ; set VICII raster to line 0
            lda #$1b
            sta $d011
            stx $d012

            ; set CIA Timer A to 60Hz
            lda $02a6
            beq ntsc
pal         lda #$25
            ldx #$40
            bne timer
ntsc        lda #$95
            ldx #$42
timer       sta $dc04
            stx $dc05

            ; SID to full volume
            lda #$0f
            sta $d418

            ; 0 indicates VIC timing, else it's from CIA
            lda speed
            bne ciainit

            ; disable CIA1 timer A interrupt, enable VICII raster interrupt
            lda #$81
            sta $d01a
            bne doinit

            ; enable CIA 1 timer A interrupt
ciainit     lda #$81
            ldx #$01
            sta $dc0d
            stx $dc0e

doinit      ; set I/O map and call song init routine
            lda #$2f
            sta $00
            lda initvec+1
            jsr getmap
            sta $01
            lda playvec+1
            jsr getmap
            sta iomap

            ; get song number
            ldx playnum
            dex
            txa
            ldx #0
            jsr init

            ; If play address, override bankswitching so
            ; we reach are routine to handle play address
            lda playvec+1
            beq run
            lda #$37
            sta $01

run         cli
            ;Sleep CPU (Sidplay specific)
idle        ; rts
            jmp idle

            ; get required I/O map to reach address
getmap      cmp #$e0
            bcc kern_on
            lda #$35
            rts
kern_on     cmp #$d0
            bcc io_on
            lda #$34
            rts
io_on       cmp #$a0
            bcc bas_on
            lda #$36
            rts
bas_on      lda #$37
            rts

            ; IRQ handler
            ; Backup Regs (From Kernel ROM)
irq         pha
            txa
            pha
            tya
            pha
            tsx

            ; Must not do BRK test if CPU was asleep
            ; (Sidplay specific)
            cpx $fc
            bcs irqjmp

            ; Check the stacked status register to see if it
            ; was due to a BRK
            lda $0104,x
            and #$10
            beq irqjmp
            jmp (brkusr)

            ; If valid play ignore user interrupt!
            ; (noted in psid specifications)
irqjmp      lda playvec+1
            bne irqjmp2
            jmp (irqusr)

            ; Entry from real C64 0x0314
irqjob      lda playvec+1
            beq noplay
irqjmp2     lda $01
            ldx iomap
            sta oldbank
            stx $01
            jsr play
            lda oldbank
            sta $01
noplay      lda $d019
            sta $d019

            ; IRQ Exit (From Kernel ROM)
irqret      lda $dc0d
            pla
            tay
            pla
            tax
            pla
nmijob      rti

            ; NMI handler
nmi         jmp (nmiusr)

.end

****************************************************************************/
