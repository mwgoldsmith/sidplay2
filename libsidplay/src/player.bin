/***************************************************************************
                          player.bin  -  C64 Sid Player
                             -------------------
    begin                : 
    copyright            : (C) 2000 by Dag Lem
    email                : resid@nimrod.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
/***************************************************************************
 *  $Log: not supported by cvs2svn $
 *  Revision 1.7  2001/05/11 18:44:11  s_a_white
 *  Old bank value now stored on stack rather than in a variable on zero page.
 *
 *  Revision 1.6  2001/05/02 21:14:59  s_a_white
 *  Play address of zero does not expect a full emulation environment and
 *  therefore a sonf can assume the expected interrupt source is automatically
 *  configured.  Registers X and Y are now zeroed before calling play.
 *
 *  Revision 1.5  2001/04/10 21:55:38  s_a_white
 *  VIC now enabled even if play address is 0.
 *
 *  Revision 1.4  2001/03/29 18:03:20  s_a_white
 *  Added assembly source code.
 *
 *  Revision 1.3  2001/03/26 21:45:53  s_a_white
 *  HVSC now correctly use the VIC.
 *
 *  Revision 1.2  2001/03/09 22:25:43  s_a_white
 *  User interrupt vector ignored if valid play address.  Bank register properly
 *  restored at end of play loop.  For play address of zero, bank register is left
 *  alone after initial init call.
 *
 *  Revision 1.1  2001/02/21 21:40:13  s_a_white
 *  Modified VSID C64 player.
 *
 ***************************************************************************/

0x00, 0x03, /* Load Address */
0xD6, 0x03, 0x1A, 0x03, 0xA7, 0x03, 0x6C, 0x06,
0x00, 0x6C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4C, 0xCD, 0x03, 0x00, 0xCD, 0x03, 0xA0, 0x03,
0xD5, 0x03, 0x78, 0xA2, 0xFF, 0x9A, 0xD8, 0xA9,
0x7F, 0x8D, 0x0D, 0xDC, 0x8D, 0x0D, 0xDD, 0xAD,
0x0D, 0xDC, 0xAD, 0x0D, 0xDD, 0xA9, 0x00, 0x8D,
0x1A, 0xD0, 0xAE, 0x19, 0xD0, 0x8E, 0x19, 0xD0,
0xA2, 0x1B, 0x8E, 0x11, 0xD0, 0x8D, 0x12, 0xD0,
0xAD, 0xA6, 0x02, 0xF0, 0x06, 0xA9, 0x25, 0xA2,
0x40, 0xD0, 0x04, 0xA9, 0x95, 0xA2, 0x42, 0x8D,
0x04, 0xDC, 0x8E, 0x05, 0xDC, 0xA2, 0x81, 0xA5,
0x03, 0xD0, 0x05, 0x8E, 0x1A, 0xD0, 0xF0, 0x08,
0xA9, 0x01, 0x8E, 0x0D, 0xDC, 0x8D, 0x0E, 0xDC,
0xA9, 0x2F, 0x85, 0x00, 0xA5, 0x05, 0x20, 0xDA,
0x03, 0x85, 0x01, 0xA5, 0x07, 0x05, 0x06, 0xF0,
0x0A, 0xA9, 0xBA, 0x8D, 0x14, 0x03, 0xA5, 0x07,
0x20, 0xDA, 0x03, 0x85, 0x08, 0xA9, 0x0F, 0x8D,
0x18, 0xD4, 0xA6, 0x02, 0xCA, 0x8A, 0xA2, 0x00,
0xA0, 0x00, 0x18, 0x20, 0x09, 0x03, 0xA5, 0x08,
0xF0, 0x04, 0xA9, 0x37, 0x85, 0x01, 0x00, 0xEA,
0xA2, 0xFF, 0x9A, 0x58, 0x4C, 0xA4, 0x03, 0x48,
0x8A, 0x48, 0x98, 0x48, 0xBA, 0xBD, 0x04, 0x01,
0x29, 0x10, 0xF0, 0x03, 0x6C, 0x16, 0x03, 0x6C,
0x14, 0x03, 0xA5, 0x01, 0xA6, 0x08, 0x48, 0x86,
0x01, 0x20, 0x06, 0x03, 0x68, 0x85, 0x01, 0xAD,
0x19, 0xD0, 0x8D, 0x19, 0xD0, 0xAD, 0x0D, 0xDC,
0x68, 0xA8, 0x68, 0xAA, 0x68, 0x40, 0x78, 0x6C,
0x18, 0x03, 0xC9, 0xE0, 0x90, 0x03, 0xA9, 0x35,
0x60, 0xC9, 0xD0, 0x90, 0x03, 0xA9, 0x34, 0x60,
0xC9, 0xA0, 0x90, 0x03, 0xA9, 0x36, 0x60, 0xA9,
0x37, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

/***************************************************************************

;-------------------------------------------------
; Parameters (do not include this in image)
            *=$0000
            ; Reserved, bank regs
            .word
playnum     .byte
speed       .byte
initvec     .word
playvec     .word
iomap       .byte


;-------------------------------------------------
; Code (image starts here)
            *=$02fe
            ; Load address
            .word *+2

            ; 6510 vectors
nmivec      .word nmi
coldvec     .word cold
irqvec      .word irq

            ; init/play PSID
play        jmp (playvec)
init        jmp (initvec)

            *=$0310
            jmp 0

            ; initial user interrupt vectors
            *=$0311
retusr      .word irqret
            .byte
irqusr      .word irqret
brkusr      .word brkjob
nmiusr      .word nmijob

            ; cold start
cold        sei
            ldx #$ff
            txs
            cld

            ; turn interrupts off
            lda #$7f
            sta $dc0d
            sta $dd0d
            lda $dc0d
            lda $dd0d
            lda #$00
            sta $d01a
            ldx $d019
            stx $d019

            ; set VICII raster to line 0
            ldx #$1b
            stx $d011
            sta $d012

            ; set CIA Timer A to 60Hz
            lda $02a6
            beq ntsc
pal         lda #$25
            ldx #$40
            bne timer
ntsc        lda #$95
            ldx #$42
timer       sta $dc04
            stx $dc05

            ; 0 indicates VIC timing, else it's from CIA
            ldx #$81
            lda speed
            bne ciainit

            ; disable CIA1 timer A interrupt, enable VICII raster interrupt
            stx $d01a
            beq doinit

            ; enable CIA 1 timer A interrupt
ciainit     lda #$01
            stx $dc0d
            sta $dc0e

doinit      ; set I/O map and call song init routine
            lda #$2f
            sta $00
            lda initvec+1
            jsr getmap
            sta $01

            ; If play address, override bankswitching so
            ; we reach are routine to handle play address
            lda playvec+1
            ora playvec
            beq noplay
            lda #(irqjob & $ff)
            sta irqusr
            lda playvec+1
            jsr getmap
noplay      sta iomap

            ; SID to full volume
            lda #$0f
            sta $d418

            ; get song number
getsong     ldx playnum
            dex
            txa
            ldx #0
            ldy #0
            clc
            jsr init
            lda iomap
            beq run
            lda #$37
            sta $01
run         brk
            ; This is just incase the song has defined BRK
			; to point to a handler ending in RTI
            nop 

            ; Entry from real C64
brkjob      ldx #$ff
            txs
            cli
idle        jmp idle

            ; IRQ handler
            ; Backup Regs (From Kernel ROM)
irq         pha
            txa
            pha
            tya
            pha
            tsx

            ; Check the stacked status register to see if it
            ; was due to a BRK
            lda $0104,x
            and #$10
            beq irqjmp
            jmp (brkusr)
irqjmp      jmp (irqusr)

irqjob      lda $01
            ldx iomap
            pha
            stx $01
            jsr play
            pla
            sta $01
            lda $d019
            sta $d019

            ; IRQ Exit (From Kernel ROM)
irqret      lda $dc0d
            pla
            tay
            pla
            tax
            pla
nmijob      rti

nmi         sei
            jmp (nmiusr)

            ; get required I/O map to reach address
getmap      cmp #$e0
            bcc kern_on
            lda #$35
            rts
kern_on     cmp #$d0
            bcc io_on
            lda #$34
            rts
io_on       cmp #$a0
            bcc bas_on
            lda #$36
            rts
bas_on      lda #$37
            rts

;-------------------------------------------------

.end

****************************************************************************/
