/***************************************************************************
                          psiddrv.a65  -  C64 Sid Player
                             -------------------
    begin                : 
    copyright            : (C) 2000 by Dag Lem
    email                : resid@nimrod.no
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
/***************************************************************************
 * Modified by Simon White <sidplay2@email.com> for use in the sidplayer
 * SIDPlay2.
 *
 * Build with:
 * xa -R -G psiddrv.a65 -o psiddrv.o65
 * od -v -An -w8 -tx1 psiddrv.o65 | sed 's/\w\w/0x&,/g' > psiddrv.bin
 ***************************************************************************/
/***************************************************************************
 *  $Log: not supported by cvs2svn $
 *  Revision 1.4  2001/12/17 23:43:29  s_a_white
 *  Fix for real C64 tunes where BRK handler is run.
 *
 *  Revision 1.3  2001/10/02 18:05:27  s_a_white
 *  Fix for real C64 tunes which correctly handle BRK.
 *
 *  Revision 1.2  2001/09/01 11:12:22  s_a_white
 *  Fixes sidplay1 environment modes.
 *
 *  Revision 1.1  2001/07/27 12:12:23  s_a_white
 *  Initial release.
 *
 ***************************************************************************/

            ; entry address
coldvec     .word cold
sidvec      .word sidplay

            ; initial user interrupt vectors
retusr      .word irqret
            .byte 0
irqusr      .word irqret
brkusr      .word brkjob
nmiusr      .word nmijob

playnum     .byte 0
speed       .byte 0
initvec     .word 0
playvec     .word 0
iomap       .byte 0

            ; init/play PSID
play        jmp (playvec)
init        jmp (initvec)

            ; cold start
cold        sei
            ldx #$ff
            txs
            cld

            ; turn interrupts off
            lda #$7f
            sta $dc0d
            sta $dd0d
            lda $dc0d
            lda $dd0d
            lda #$00
            sta $d01a
            ldx $d019
            stx $d019

            ; set VICII raster to line 0
            ldx #$1b
            stx $d011
            sta $d012

            ; set CIA Timer A to 60Hz
            lda $02a6
            beq ntsc
pal         lda #$25
            ldx #$40
            bne timer
ntsc        lda #$95
            ldx #$42
timer       sta $dc04
            stx $dc05

            ; 0 indicates VIC timing, else it's from CIA
            ldx #$81
            lda speed
            bne ciainit

            ; disable CIA1 timer A interrupt, enable VICII raster interrupt
            stx $d01a
            beq doinit

            ; enable CIA 1 timer A interrupt
ciainit     lda #$01
            stx $dc0d
            sta $dc0e

doinit      ; set I/O map and call song init routine
            lda #$2f
            sta $00
            lda initvec+1
            jsr getmap
            sta $01

            ; If play address, override bankswitching so
            ; we reach are routine to handle play address
            lda playvec+1
            ora playvec
            beq noplay
            lda #<irqjob
            sta $0314
            lda playvec+1
            jsr getmap
noplay      sta iomap

            ; SID to full volume
            lda #$0f
            sta $d418

            ; get song number
getsong     ldx playnum
            dex
            txa
            ldx #0
            ldy #0
            clc
            jsr init
setiomap    lda iomap
            beq run
            lda #$37
            sta $01
            ; Kick off sidplay2 optimisation
run         brk
            ; This is just incase the song has defined BRK
            ; to point to a handler ending in RTI
            nop 
            
brkjob      ; Entry from real C64
            cli
idle        jmp idle

irqjob      lda $01
            pha
            lda iomap
            sta $01
            lda #0
            jsr play
            pla
            sta $01
            lda $d019
            sta $d019

            ; IRQ Exit (From Kernel ROM)
irqret      lda $dc0d
            pla
            tay
            pla
            tax
            pla
nmijob      rti

            ; get required I/O map to reach address
getmap      cmp #$e0
            bcc kern_on
            lda #$35
            rts
kern_on     cmp #$d0
            bcc io_on
            lda #$34
            rts
io_on       cmp #$a0
            bcc bas_on
            lda #$36
            rts
bas_on      lda #$37
            rts

            ; sidplay compatibilty irq
sidplay     ldx #0
            ldy #0
            jsr irqvec
            pla
            jmp setiomap
irqvec      jmp ($0314)

.end
